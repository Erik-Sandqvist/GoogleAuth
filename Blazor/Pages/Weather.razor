@page "/weather"
@using System.Text.Json
@using Blazor.Models
@inject IHttpClientFactory httpClientFactory
@inject ILocalStorageService localStorageService

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>


@if (forecasts == null && string.IsNullOrEmpty(token))
{
    <p><em>You need to sign in to see weather.</em></p>
}
else if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private WeatherForecast[]? forecasts;
    private string? token;

    protected override async Task OnInitializedAsync()
    {
        token = await localStorageService.GetItemAsStringAsync(Constant.Key);
        if (!string.IsNullOrEmpty(token))
        {
            var client = httpClientFactory.CreateClient(Constant.Client);
            var tokenModel = JsonSerializer.Deserialize<Token>(token);
            client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", tokenModel!.AccessToken);

            forecasts = await client.GetFromJsonAsync<WeatherForecast[]>("weatherforecast");
        }
    }
}


 
